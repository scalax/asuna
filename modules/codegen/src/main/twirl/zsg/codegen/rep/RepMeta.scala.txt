@(contextNum: Int)(maxZTupleNum: Int)

package zsg.rep

abstract class RepMeta@{contextNum}[@for(i <- 1 to contextNum) { @if(i > 1) { , } T@{i} }](@for(i <- 1 to contextNum) { @if(i > 1) { , } val rep@{i}: T@{i} }) {
    @for(i <- 1 to maxZTupleNum) {
        def rep[@for(ii <- 1 to i) { @if(ii > 1) { , } Tu@{ii} }
            @for(ii <- 1 to i) {
                @for(iii <- 1 to contextNum) {
                    , Out_@{ii}_@{iii}
                }
            }
        ](@if(i == 1) {
            tuple: Tu1
        } else {
            tuple: Tuple@{i}[@for(ii <- 1 to i) { @if(ii > 1) { , } Tu@{ii} }]
        })(implicit
            @for(ii <- 1 to i) {
                @for(iii <- 1 to contextNum) {
                    @if(ii == 1) {
                        @if(iii > 1) { , } repFunction_@{iii}_@{ii}: RepFunction[T@{iii}, Tu@{ii}, Out_@{ii}_@{iii}]
                    } else {
                        , repFunction_@{iii}_@{ii}: RepFunction[Out_@{ii - 1}_@{iii}, Tu@{ii}, Out_@{ii}_@{iii}]
                    }
                }
            }
        ): RepMeta@{contextNum}[@for(iii <- 1 to contextNum) { @if(iii > 1) { , } Out_@{i}_@{iii} }]
    }
}

object RepMeta@{contextNum} extends impl.RepMetaOptionTakerImplicit_1_@{contextNum} {
    @for(i <- 1 to contextNum) {
        implicit def repMetaTakerImplicit@{i}[@for(ii <- 1 to contextNum) { @if(ii > 1) { , } @if(i == ii) { TTu@{i} } else { Tu@{ii} } }]: RepTaker[RepMeta@{contextNum}[@for(ii <- 1 to contextNum) { @if(ii > 1) { , } @if(i == ii) { TTu@{i} } else { Tu@{ii} } }], TTu@{i}] =
            new RepTaker[RepMeta@{contextNum}[@for(ii <- 1 to contextNum) { @if(ii > 1) { , } @if(i == ii) { TTu@{i} } else { Tu@{ii} } }], TTu@{i}] {
                override def function(i: RepMeta@{contextNum}[@for(ii <- 1 to contextNum) { @if(ii > 1) { , } @if(i == ii) { TTu@{i} } else { Tu@{ii} } }]): TTu@{i} = i.rep@{i}
            }

        implicit def repMetaOptionTakerImplicit@{i}[@for(ii <- 1 to contextNum) { @if(ii > 1) { , } @if(i == ii) { TTu@{i} } else { Tu@{ii} } }]: OptionRepTaker[RepMeta@{contextNum}[@for(ii <- 1 to contextNum) { @if(ii > 1) { , } @if(i == ii) { TTu@{i} } else { Tu@{ii} } }], TTu@{i}] =
            new OptionRepTaker[RepMeta@{contextNum}[@for(ii <- 1 to contextNum) { @if(ii > 1) { , } @if(i == ii) { TTu@{i} } else { Tu@{ii} } }], TTu@{i}] {
                override def function(i: RepMeta@{contextNum}[@for(ii <- 1 to contextNum) { @if(ii > 1) { , } @if(i == ii) { TTu@{i} } else { Tu@{ii} } }]): Option[TTu@{i}] = Some(i.rep@{i})
            }
    }
}