@(ZTupleNum: Int)(maxContextNum: Int)(isDotty: Boolean)
package zsg.scala_tuple.tuple_support

import scala.language.higherKinds

@ApplicationType(tupleNum: Int, contextNum: Int) = { zsg.ApplicationX@{contextNum}[F, T
    @for(i <- 1 to contextNum) {
        , Tuple@{tupleNum}[@for(ii <- 1 to tupleNum) { @if(ii > 1) { , } Tuple@{ii}_Context@{i} }]
    }
] }

@ApplicationTypeParameter(tupleNum: Int, contextNum: Int) = { [F[@for(i <- 1 to contextNum) { @if(i > 1) { , } _ }], T <: zsg.Context@{contextNum}[F]
    @for(i <- 1 to contextNum) {
        @for(ii <-1 to tupleNum) { , Tuple@{ii}_Context@{i} }
    }
] }

@ApplicationTypeResult(tupleNum: Int, contextNum: Int) = { F[
    @for(i <- 1 to contextNum) {
        @if(i > 1) { , } Tuple@{tupleNum}[@for(ii <- 1 to tupleNum) { @if(ii > 1) { , } Tuple@{ii}_Context@{i} }]
    }
] }

@ApplicationParameter(tupleNum: Int, contextNum: Int) = {
    @for(tupleIndex <- 1 to tupleNum) {
        @if(tupleIndex > 1) { , } @if(isDotty) { inline } t@{tupleIndex}: F[
            @for(i <- 1 to contextNum) {
                @if(i > 1) { , } Tuple@{tupleIndex}_Context@{i}
            }
        ]
    }
}

trait ScalaTupleImplicits_@{ZTupleNum} {

    @for(contextNum <- 1 to maxContextNum) {
        @if(isDotty) { inline given } else { implicit def contextNum_@{contextNum}_@{ZTupleNum} } @ApplicationTypeParameter(tupleNum = ZTupleNum, contextNum = contextNum) @* *@ (
            @if(isDotty) { using } else { implicit } @ApplicationParameter(tupleNum = ZTupleNum, contextNum = contextNum)
        ) @if(isDotty) { as } else { : } @ApplicationType(tupleNum = ZTupleNum, contextNum = contextNum) = new @ApplicationType(tupleNum = ZTupleNum, contextNum = contextNum) @* *@ {
            override def application(context: T): @ApplicationTypeResult(tupleNum = ZTupleNum, contextNum = contextNum) = {
                context.append(@{zsg.codegen.JinzhiTree.contextAppend(i = ZTupleNum - 1, contextNum = contextNum)}, t@{ZTupleNum})(zsg.scala_tuple.tuple_support.PlusInstanceScalaTuple_@{ZTupleNum}.contextNum@{contextNum})
            }
        }
    }

}