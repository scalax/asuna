@(tagNum: Int)(typeParamNum: Int)(maxAsunaTupleNum: Int)(isDotty: Boolean)

package zsg.scala_tuple.tuple_support

import zsg.ApplicationX@{typeParamNum}
import zsg.Context@{typeParamNum}

import scala.language.higherKinds

trait ScalaTupleImplicits_@{tagNum}_@{typeParamNum} {

    @if(tagNum == 1) {
        @if(isDotty) { inline given } else { implicit def tupleTagApplicationImplicit_tagNum@{tagNum}_typeParamNum@{typeParamNum} } [
            F[@{(1 to typeParamNum).map(_ => "_").mkString(" , ")}],
            T <: Context@{typeParamNum}[F],
            @{zsg.codegen.SnippetUtil.PlusX_XI_Snippet(1 to typeParamNum)(1 to tagNum).map(_.mkString(" , ")).mkString(",\n            ")}
        ](@if(isDotty) { using } else { implicit }
            @for(paramI <- 1 to tagNum) { @if(paramI > 1) { , } @if(isDotty) { inline } t@{paramI}: F[@for(typeI <- 1 to typeParamNum) { @if(typeI > 1) { , } Plus@{typeI}_X@{paramI} }] }
        ) @if(isDotty) { as } else { : } ApplicationX@{typeParamNum}[
            F,
            T,
            @{zsg.codegen.SnippetUtil.PlusX_XI_Snippet(1 to typeParamNum)(1 to tagNum).map(_.mkString("Tuple" + tagNum + "[", " , ", "]")).mkString(",\n            ")}
        ] = new ApplicationX@{typeParamNum}[
            F,
            T,
            @{zsg.codegen.SnippetUtil.PlusX_XI_Snippet(1 to typeParamNum)(1 to tagNum).map(_.mkString("Tuple" + tagNum + "[", " , ", "]")).mkString(",\n            ")}
        ] {
            override def application(context: T) =
                context.append(context.start, t1)(PlusToTuple@{typeParamNum}.plus@{typeParamNum}WithTypeParameter@{tagNum})
        }
    } else if(tagNum == 2) {
        @if(isDotty) { inline given } else { implicit def tupleTagApplicationImplicit_tagNum@{tagNum}_typeParamNum@{typeParamNum} } [
            F[@{(1 to typeParamNum).map(_ => "_").mkString(" , ")}],
            T <: Context@{typeParamNum}[F],
            @{zsg.codegen.SnippetUtil.PlusX_XI_Snippet(1 to typeParamNum)(1 to tagNum).map(_.mkString(" , ")).mkString(",\n            ")}
        ](@if(isDotty) { using } else { implicit }
            @for(paramI <- 1 to tagNum) { @if(paramI > 1) { , } @if(isDotty) { inline } t@{paramI}: F[@for(typeI <- 1 to typeParamNum) { @if(typeI > 1) { , } Plus@{typeI}_X@{paramI} }] }
        ) @if(isDotty) { as } else { : } ApplicationX@{typeParamNum}[
            F,
            T,
            @{zsg.codegen.SnippetUtil.PlusX_XI_Snippet(1 to typeParamNum)(1 to tagNum).map(_.mkString("Tuple" + tagNum + "[", " , ", "]")).mkString(",\n            ")}
        ] = new ApplicationX@{typeParamNum}[
            F,
            T,
            @{zsg.codegen.SnippetUtil.PlusX_XI_Snippet(1 to typeParamNum)(1 to tagNum).map(_.mkString("Tuple" + tagNum + "[", " , ", "]")).mkString(",\n            ")}
        ] {
            override def application(context: T) =
                context.append(t1, t2)(PlusToTuple@{typeParamNum}.plus@{typeParamNum}WithTypeParameter@{tagNum})
        }
    } else {
        @if(isDotty) { inline given } else { implicit def tupleTagApplicationImplicit_tagNum@{tagNum}_typeParamNum@{typeParamNum} } [
            F[@{(1 to typeParamNum).map(_ => "_").mkString(" , ")}],
            T <: Context@{typeParamNum}[F],
            @{zsg.codegen.SnippetUtil.PlusX_XI_Snippet(1 to typeParamNum)(1 to tagNum).map(_.mkString(" , ")).mkString(",\n            ")}
        ](@if(isDotty) { using } else { implicit }
            @for(paramI <- 1 to tagNum) { @if(paramI > 1) { , } @if(isDotty) { inline } t@{paramI}: F[@for(typeI <- 1 to typeParamNum) { @if(typeI > 1) { , } Plus@{typeI}_X@{paramI} }] }
        ) @if(isDotty) { as } else { : } ApplicationX@{typeParamNum}[
            F,
            T,
            @{zsg.codegen.SnippetUtil.PlusX_XI_Snippet(1 to typeParamNum)(1 to tagNum).map(_.mkString("Tuple" + tagNum + "[", " , ", "]")).mkString(",\n            ")}
        ] = new ApplicationX@{typeParamNum}[
            F,
            T,
            @{zsg.codegen.SnippetUtil.PlusX_XI_Snippet(1 to typeParamNum)(1 to tagNum).map(_.mkString("Tuple" + tagNum + "[", " , ", "]")).mkString(",\n            ")}
        ] {
            override def application(context: T) = {
                context.append(ApplicationFetchContent.app@{typeParamNum}[F, T, @{zsg.codegen.SnippetUtil.Lift_Tuple_To_AsunaTuple2(
                    typeParameterCount = 1 to typeParamNum,
                    seq = 1 to tagNum
                )}].application(context), context.start)(PlusToTuple@{typeParamNum}.plus@{typeParamNum}WithTypeParameter@{tagNum})
            }
        }
    }

}

object ScalaTupleImplicits_@{tagNum}_@{typeParamNum} extends ScalaTupleImplicits_@{tagNum}_@{typeParamNum}