@(ZTupleNum: Int, maxContextNum: Int)(isDotty: Boolean)
package zsg.scala_tuple.tuple_support

@Plus1Name(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } ZsgTuple0 } @for(ii <- 1 to contextCount) { , I@{ii} }  @for(ii <- 1 to contextCount) { , ZTuple@{tupleNum}[I@{ii}] }] }
@Plus1NameAny(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } ZsgTuple0 } @for(ii <- 1 to contextCount) { , Any }  @for(ii <- 1 to contextCount) { , ZTuple@{tupleNum}[Any] }] }

@NodePlus1Name(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } ZsgTuple0 } @for(ii <- 1 to contextCount) { , I@{ii} }  @for(ii <- 1 to contextCount) { , ZNode@{tupleNum}[I@{ii}] }] }
@NodePlus1NameAny(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } ZsgTuple0 } @for(ii <- 1 to contextCount) { , TupleTag }  @for(ii <- 1 to contextCount) { , ZNode@{tupleNum}[TupleTag] }] }

@PlusNName(contextCount: Int, tupleNum: Int) = { zsg.Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } HighTupleAlias@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} } ] } @for(ii <- 1 to contextCount) { , I@{ii} }  @for(ii <- 1 to contextCount) { , Tuple@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }, I@{ii}] }] }
@PlusNNameAny(contextCount: Int, tupleNum: Int) = { zsg.Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } HighTupleAlias@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } Any } ] } @for(ii <- 1 to contextCount) { , Any }  @for(ii <- 1 to contextCount) { , Tuple@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } Any }, Any ] }] }

@NodePlusNName(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } HighTupleAlias@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} } ] } @for(ii <- 1 to contextCount) { , I@{ii} }  @for(ii <- 1 to contextCount) { , ZNode@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }, I@{ii}] }] }
@NodePlusNNameAny(contextCount: Int, tupleNum: Int) = { Plus@{contextCount}[@for(ii <- 1 to contextCount) { @if(ii > 1) { , } HighTupleAlias@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } TupleTag } ] } @for(ii <- 1 to contextCount) { , TupleTag }  @for(ii <- 1 to contextCount) { , ZNode@{tupleNum}[@for(iii <- 1 to tupleNum - 1) { @if(iii > 1) { , } TupleTag }, TupleTag ] }] }

object PlusInstanceScalaTuple_@{ZTupleNum} {
    type HighTupleAlias@{ZTupleNum}[@for(ii <- 1 to ZTupleNum - 1) { @if(ii > 1) { , } I@{ii} }] = @{zsg.codegen.JinzhiTree.treeToType(ZTupleNum - 1)}
    type HighTupleAliasUpper@{ZTupleNum}[@for(ii <- 1 to ZTupleNum) { @if(ii > 1) { , } I@{ii} }] = @{zsg.codegen.JinzhiTree.treeToType(ZTupleNum)}
    @for(i <- 1 to maxContextNum) {
        class PContextNum@{i}[
            @for(ii <- 1 to i) {
                @if(ii > 1) { , }
                @for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }
            }
            @for(ii <- 1 to i) {
                , I@{ii}
            }
        ] extends @PlusNName(contextCount = i, tupleNum = ZTupleNum) @* *@ {
            @for(ii <- 1 to i) {
                @if(isDotty) { inline } override def takeHead@{ii}(n: Tuple@{ZTupleNum}[@for(iii <- 1 to ZTupleNum - 1) { Tuple@{iii}_Context@{ii} , } I@{ii}]): HighTupleAlias@{ZTupleNum}[@for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }] = @{zsg.codegen.JinzhiTree.scalaTupleTreeBuildModel(ZTupleNum - 1)}
            }
            @for(ii <- 1 to i) {
                @if(isDotty) { inline } override def takeTail@{ii}(n: Tuple@{ZTupleNum}[@for(iii <- 1 to ZTupleNum - 1) { Tuple@{iii}_Context@{ii} , } I@{ii}]): I@{ii} = n._@{ZTupleNum}
            }
            @for(ii <- 1 to i) {
                @if(isDotty) { inline } override def plus@{ii}(m: HighTupleAlias@{ZTupleNum}[@for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }], n: I@{ii}): Tuple@{ZTupleNum}[@for(iii <- 1 to ZTupleNum - 1) { Tuple@{iii}_Context@{ii} , } I@{ii}] = @{zsg.codegen.JinzhiTree.scalaTupleTreeIndex(i = ZTupleNum, className = "Tuple" + ZTupleNum)}
            }
        }
        val cacheContextNum@{i}: PContextNum@{i}[@for(ii <- 1 to i * ZTupleNum) { @if(ii > 1) { , } Any }] = new PContextNum@{i}[@for(ii <- 1 to i * ZTupleNum) { @if(ii > 1) { , } Any }]
        def contextNum@{i}[@for(ii <- 1 to i) {
            @if(ii > 1) { , }
                @for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }
            }
            @for(ii <- 1 to i) {
                , I@{ii}
        }]: PContextNum@{i}[
            @for(ii <- 1 to i) {
                @if(ii > 1) { , }
                @for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }
            }
            @for(ii <- 1 to i) {
                , I@{ii}
            }
        ] = cacheContextNum@{i}.asInstanceOf[PContextNum@{i}[
            @for(ii <- 1 to i) {
                @if(ii > 1) { , }
                @for(iii <- 1 to ZTupleNum - 1) { @if(iii > 1) { , } Tuple@{iii}_Context@{ii} }
            }
            @for(ii <- 1 to i) {
                , I@{ii}
            }
        ]]
    }

}